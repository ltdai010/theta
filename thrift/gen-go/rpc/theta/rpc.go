// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package theta

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENotFound TErrorCode = -1
  TErrorCode_EUnknown TErrorCode = -2
  TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENotFound: return "ENotFound"
  case TErrorCode_EUnknown: return "EUnknown"
  case TErrorCode_EDataExisted: return "EDataExisted"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENotFound": return TErrorCode_ENotFound, nil 
  case "EUnknown": return TErrorCode_EUnknown, nil 
  case "EDataExisted": return TErrorCode_EDataExisted, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Version
//  - GitHash
//  - Timestamp
type Version struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  GitHash string `thrift:"git_hash,2" db:"git_hash" json:"git_hash"`
  Timestamp string `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
}

func NewVersion() *Version {
  return &Version{}
}


func (p *Version) GetVersion() string {
  return p.Version
}

func (p *Version) GetGitHash() string {
  return p.GitHash
}

func (p *Version) GetTimestamp() string {
  return p.Timestamp
}
func (p *Version) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Version)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *Version)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GitHash = v
}
  return nil
}

func (p *Version)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *Version) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Version"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Version) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *Version) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("git_hash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:git_hash: ", p), err) }
  if err := oprot.WriteString(string(p.GitHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.git_hash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:git_hash: ", p), err) }
  return err
}

func (p *Version) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  return err
}

func (p *Version) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Version(%+v)", *p)
}

// Attributes:
//  - Sequence
//  - Coin
//  - ReserverdFunds
//  - LastUpdateBlockHeight
//  - Root
//  - Code
type Account struct {
  Sequence string `thrift:"sequence,1" db:"sequence" json:"sequence"`
  Coin *Coin `thrift:"coin,2" db:"coin" json:"coin"`
  ReserverdFunds []string `thrift:"reserverd_funds,3" db:"reserverd_funds" json:"reserverd_funds"`
  LastUpdateBlockHeight string `thrift:"last_update_block_height,4" db:"last_update_block_height" json:"last_update_block_height"`
  Root string `thrift:"root,5" db:"root" json:"root"`
  Code string `thrift:"code,6" db:"code" json:"code"`
}

func NewAccount() *Account {
  return &Account{}
}


func (p *Account) GetSequence() string {
  return p.Sequence
}
var Account_Coin_DEFAULT *Coin
func (p *Account) GetCoin() *Coin {
  if !p.IsSetCoin() {
    return Account_Coin_DEFAULT
  }
return p.Coin
}

func (p *Account) GetReserverdFunds() []string {
  return p.ReserverdFunds
}

func (p *Account) GetLastUpdateBlockHeight() string {
  return p.LastUpdateBlockHeight
}

func (p *Account) GetRoot() string {
  return p.Root
}

func (p *Account) GetCode() string {
  return p.Code
}
func (p *Account) IsSetCoin() bool {
  return p.Coin != nil
}

func (p *Account) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Account)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *Account)  ReadField2(iprot thrift.TProtocol) error {
  p.Coin = &Coin{}
  if err := p.Coin.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Coin), err)
  }
  return nil
}

func (p *Account)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ReserverdFunds =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.ReserverdFunds = append(p.ReserverdFunds, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Account)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastUpdateBlockHeight = v
}
  return nil
}

func (p *Account)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Root = v
}
  return nil
}

func (p *Account)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Account) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Account"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Account) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sequence", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sequence: ", p), err) }
  if err := oprot.WriteString(string(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sequence: ", p), err) }
  return err
}

func (p *Account) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coin", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coin: ", p), err) }
  if err := p.Coin.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Coin), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coin: ", p), err) }
  return err
}

func (p *Account) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reserverd_funds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reserverd_funds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ReserverdFunds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ReserverdFunds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reserverd_funds: ", p), err) }
  return err
}

func (p *Account) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("last_update_block_height", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:last_update_block_height: ", p), err) }
  if err := oprot.WriteString(string(p.LastUpdateBlockHeight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.last_update_block_height (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:last_update_block_height: ", p), err) }
  return err
}

func (p *Account) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("root", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:root: ", p), err) }
  if err := oprot.WriteString(string(p.Root)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.root (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:root: ", p), err) }
  return err
}

func (p *Account) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:code: ", p), err) }
  if err := oprot.WriteString(string(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:code: ", p), err) }
  return err
}

func (p *Account) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Account(%+v)", *p)
}

// Attributes:
//  - Address
//  - Coins
//  - Sequence
//  - Signature
type Proposer struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  Coins *Coin `thrift:"coins,2" db:"coins" json:"coins"`
  Sequence string `thrift:"sequence,3" db:"sequence" json:"sequence"`
  Signature string `thrift:"signature,4" db:"signature" json:"signature"`
}

func NewProposer() *Proposer {
  return &Proposer{}
}


func (p *Proposer) GetAddress() string {
  return p.Address
}
var Proposer_Coins_DEFAULT *Coin
func (p *Proposer) GetCoins() *Coin {
  if !p.IsSetCoins() {
    return Proposer_Coins_DEFAULT
  }
return p.Coins
}

func (p *Proposer) GetSequence() string {
  return p.Sequence
}

func (p *Proposer) GetSignature() string {
  return p.Signature
}
func (p *Proposer) IsSetCoins() bool {
  return p.Coins != nil
}

func (p *Proposer) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Proposer)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Proposer)  ReadField2(iprot thrift.TProtocol) error {
  p.Coins = &Coin{}
  if err := p.Coins.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Coins), err)
  }
  return nil
}

func (p *Proposer)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *Proposer)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *Proposer) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Proposer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Proposer) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *Proposer) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coins", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coins: ", p), err) }
  if err := p.Coins.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Coins), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coins: ", p), err) }
  return err
}

func (p *Proposer) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sequence", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sequence: ", p), err) }
  if err := oprot.WriteString(string(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sequence: ", p), err) }
  return err
}

func (p *Proposer) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signature", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:signature: ", p), err) }
  if err := oprot.WriteString(string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signature (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:signature: ", p), err) }
  return err
}

func (p *Proposer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Proposer(%+v)", *p)
}

// Attributes:
//  - Address
//  - Coins
type Output struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  Coins *Coin `thrift:"coins,2" db:"coins" json:"coins"`
}

func NewOutput() *Output {
  return &Output{}
}


func (p *Output) GetAddress() string {
  return p.Address
}
var Output_Coins_DEFAULT *Coin
func (p *Output) GetCoins() *Coin {
  if !p.IsSetCoins() {
    return Output_Coins_DEFAULT
  }
return p.Coins
}
func (p *Output) IsSetCoins() bool {
  return p.Coins != nil
}

func (p *Output) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Output)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Output)  ReadField2(iprot thrift.TProtocol) error {
  p.Coins = &Coin{}
  if err := p.Coins.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Coins), err)
  }
  return nil
}

func (p *Output) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Output"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Output) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *Output) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coins", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coins: ", p), err) }
  if err := p.Coins.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Coins), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coins: ", p), err) }
  return err
}

func (p *Output) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Output(%+v)", *p)
}

// Attributes:
//  - Address
//  - Coins
//  - Sequence
//  - Signature
type Input struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  Coins *Coin `thrift:"coins,2" db:"coins" json:"coins"`
  Sequence string `thrift:"sequence,3" db:"sequence" json:"sequence"`
  Signature string `thrift:"signature,4" db:"signature" json:"signature"`
}

func NewInput() *Input {
  return &Input{}
}


func (p *Input) GetAddress() string {
  return p.Address
}
var Input_Coins_DEFAULT *Coin
func (p *Input) GetCoins() *Coin {
  if !p.IsSetCoins() {
    return Input_Coins_DEFAULT
  }
return p.Coins
}

func (p *Input) GetSequence() string {
  return p.Sequence
}

func (p *Input) GetSignature() string {
  return p.Signature
}
func (p *Input) IsSetCoins() bool {
  return p.Coins != nil
}

func (p *Input) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Input)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Input)  ReadField2(iprot thrift.TProtocol) error {
  p.Coins = &Coin{}
  if err := p.Coins.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Coins), err)
  }
  return nil
}

func (p *Input)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *Input)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *Input) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Input"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Input) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *Input) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coins", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coins: ", p), err) }
  if err := p.Coins.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Coins), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coins: ", p), err) }
  return err
}

func (p *Input) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sequence", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sequence: ", p), err) }
  if err := oprot.WriteString(string(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sequence: ", p), err) }
  return err
}

func (p *Input) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signature", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:signature: ", p), err) }
  if err := oprot.WriteString(string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signature (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:signature: ", p), err) }
  return err
}

func (p *Input) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Input(%+v)", *p)
}

// Attributes:
//  - Proposer
//  - Outputs
//  - BlockHeight
//  - Fee
//  - Inputs
type RawTransaction struct {
  Proposer *Proposer `thrift:"proposer,1" db:"proposer" json:"proposer"`
  Outputs []*Output `thrift:"outputs,2" db:"outputs" json:"outputs"`
  BlockHeight string `thrift:"block_height,3" db:"block_height" json:"block_height"`
  Fee *Fee `thrift:"fee,4" db:"fee" json:"fee"`
  Inputs []*Input `thrift:"inputs,5" db:"inputs" json:"inputs"`
}

func NewRawTransaction() *RawTransaction {
  return &RawTransaction{}
}

var RawTransaction_Proposer_DEFAULT *Proposer
func (p *RawTransaction) GetProposer() *Proposer {
  if !p.IsSetProposer() {
    return RawTransaction_Proposer_DEFAULT
  }
return p.Proposer
}

func (p *RawTransaction) GetOutputs() []*Output {
  return p.Outputs
}

func (p *RawTransaction) GetBlockHeight() string {
  return p.BlockHeight
}
var RawTransaction_Fee_DEFAULT *Fee
func (p *RawTransaction) GetFee() *Fee {
  if !p.IsSetFee() {
    return RawTransaction_Fee_DEFAULT
  }
return p.Fee
}

func (p *RawTransaction) GetInputs() []*Input {
  return p.Inputs
}
func (p *RawTransaction) IsSetProposer() bool {
  return p.Proposer != nil
}

func (p *RawTransaction) IsSetFee() bool {
  return p.Fee != nil
}

func (p *RawTransaction) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RawTransaction)  ReadField1(iprot thrift.TProtocol) error {
  p.Proposer = &Proposer{}
  if err := p.Proposer.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Proposer), err)
  }
  return nil
}

func (p *RawTransaction)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Output, 0, size)
  p.Outputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Output{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Outputs = append(p.Outputs, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RawTransaction)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BlockHeight = v
}
  return nil
}

func (p *RawTransaction)  ReadField4(iprot thrift.TProtocol) error {
  p.Fee = &Fee{}
  if err := p.Fee.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *RawTransaction)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Input, 0, size)
  p.Inputs =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &Input{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Inputs = append(p.Inputs, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RawTransaction) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RawTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RawTransaction) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proposer", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:proposer: ", p), err) }
  if err := p.Proposer.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Proposer), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:proposer: ", p), err) }
  return err
}

func (p *RawTransaction) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outputs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outputs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Outputs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Outputs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outputs: ", p), err) }
  return err
}

func (p *RawTransaction) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("block_height", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:block_height: ", p), err) }
  if err := oprot.WriteString(string(p.BlockHeight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.block_height (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:block_height: ", p), err) }
  return err
}

func (p *RawTransaction) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fee: ", p), err) }
  if err := p.Fee.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fee: ", p), err) }
  return err
}

func (p *RawTransaction) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inputs", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inputs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Inputs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Inputs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inputs: ", p), err) }
  return err
}

func (p *RawTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RawTransaction(%+v)", *p)
}

// Attributes:
//  - Raws
//  - Type
//  - Hash
type TransactionInBlock struct {
  Raws *RawTransaction `thrift:"raws,1" db:"raws" json:"raws"`
  Type int32 `thrift:"type,2" db:"type" json:"type"`
  Hash string `thrift:"hash,3" db:"hash" json:"hash"`
}

func NewTransactionInBlock() *TransactionInBlock {
  return &TransactionInBlock{}
}

var TransactionInBlock_Raws_DEFAULT *RawTransaction
func (p *TransactionInBlock) GetRaws() *RawTransaction {
  if !p.IsSetRaws() {
    return TransactionInBlock_Raws_DEFAULT
  }
return p.Raws
}

func (p *TransactionInBlock) GetType() int32 {
  return p.Type
}

func (p *TransactionInBlock) GetHash() string {
  return p.Hash
}
func (p *TransactionInBlock) IsSetRaws() bool {
  return p.Raws != nil
}

func (p *TransactionInBlock) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionInBlock)  ReadField1(iprot thrift.TProtocol) error {
  p.Raws = &RawTransaction{}
  if err := p.Raws.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Raws), err)
  }
  return nil
}

func (p *TransactionInBlock)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TransactionInBlock)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *TransactionInBlock) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransactionInBlock"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionInBlock) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("raws", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:raws: ", p), err) }
  if err := p.Raws.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Raws), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:raws: ", p), err) }
  return err
}

func (p *TransactionInBlock) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TransactionInBlock) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hash: ", p), err) }
  return err
}

func (p *TransactionInBlock) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionInBlock(%+v)", *p)
}

// Attributes:
//  - BlockHash
//  - BlockHeight
//  - Status
//  - Hash
//  - Transaction
type TransactionResult_ struct {
  BlockHash string `thrift:"block_hash,1" db:"block_hash" json:"block_hash"`
  BlockHeight string `thrift:"block_height,2" db:"block_height" json:"block_height"`
  Status string `thrift:"status,3" db:"status" json:"status"`
  Hash string `thrift:"hash,4" db:"hash" json:"hash"`
  Transaction *TransactionData `thrift:"transaction,5" db:"transaction" json:"transaction"`
}

func NewTransactionResult_() *TransactionResult_ {
  return &TransactionResult_{}
}


func (p *TransactionResult_) GetBlockHash() string {
  return p.BlockHash
}

func (p *TransactionResult_) GetBlockHeight() string {
  return p.BlockHeight
}

func (p *TransactionResult_) GetStatus() string {
  return p.Status
}

func (p *TransactionResult_) GetHash() string {
  return p.Hash
}
var TransactionResult__Transaction_DEFAULT *TransactionData
func (p *TransactionResult_) GetTransaction() *TransactionData {
  if !p.IsSetTransaction() {
    return TransactionResult__Transaction_DEFAULT
  }
return p.Transaction
}
func (p *TransactionResult_) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *TransactionResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BlockHash = v
}
  return nil
}

func (p *TransactionResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BlockHeight = v
}
  return nil
}

func (p *TransactionResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TransactionResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *TransactionResult_)  ReadField5(iprot thrift.TProtocol) error {
  p.Transaction = &TransactionData{}
  if err := p.Transaction.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *TransactionResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransactionResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("block_hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:block_hash: ", p), err) }
  if err := oprot.WriteString(string(p.BlockHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.block_hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:block_hash: ", p), err) }
  return err
}

func (p *TransactionResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("block_height", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:block_height: ", p), err) }
  if err := oprot.WriteString(string(p.BlockHeight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.block_height (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:block_height: ", p), err) }
  return err
}

func (p *TransactionResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *TransactionResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hash: ", p), err) }
  return err
}

func (p *TransactionResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transaction", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transaction: ", p), err) }
  if err := p.Transaction.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transaction: ", p), err) }
  return err
}

func (p *TransactionResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionResult_(%+v)", *p)
}

// Attributes:
//  - Fee
//  - Inputs
//  - Outputs
type TransactionData struct {
  Fee *Fee `thrift:"fee,1" db:"fee" json:"fee"`
  Inputs *Input `thrift:"inputs,2" db:"inputs" json:"inputs"`
  Outputs *Output `thrift:"outputs,3" db:"outputs" json:"outputs"`
}

func NewTransactionData() *TransactionData {
  return &TransactionData{}
}

var TransactionData_Fee_DEFAULT *Fee
func (p *TransactionData) GetFee() *Fee {
  if !p.IsSetFee() {
    return TransactionData_Fee_DEFAULT
  }
return p.Fee
}
var TransactionData_Inputs_DEFAULT *Input
func (p *TransactionData) GetInputs() *Input {
  if !p.IsSetInputs() {
    return TransactionData_Inputs_DEFAULT
  }
return p.Inputs
}
var TransactionData_Outputs_DEFAULT *Output
func (p *TransactionData) GetOutputs() *Output {
  if !p.IsSetOutputs() {
    return TransactionData_Outputs_DEFAULT
  }
return p.Outputs
}
func (p *TransactionData) IsSetFee() bool {
  return p.Fee != nil
}

func (p *TransactionData) IsSetInputs() bool {
  return p.Inputs != nil
}

func (p *TransactionData) IsSetOutputs() bool {
  return p.Outputs != nil
}

func (p *TransactionData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionData)  ReadField1(iprot thrift.TProtocol) error {
  p.Fee = &Fee{}
  if err := p.Fee.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fee), err)
  }
  return nil
}

func (p *TransactionData)  ReadField2(iprot thrift.TProtocol) error {
  p.Inputs = &Input{}
  if err := p.Inputs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Inputs), err)
  }
  return nil
}

func (p *TransactionData)  ReadField3(iprot thrift.TProtocol) error {
  p.Outputs = &Output{}
  if err := p.Outputs.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Outputs), err)
  }
  return nil
}

func (p *TransactionData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransactionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fee: ", p), err) }
  if err := p.Fee.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fee), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fee: ", p), err) }
  return err
}

func (p *TransactionData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inputs", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:inputs: ", p), err) }
  if err := p.Inputs.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Inputs), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:inputs: ", p), err) }
  return err
}

func (p *TransactionData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outputs", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outputs: ", p), err) }
  if err := p.Outputs.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Outputs), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outputs: ", p), err) }
  return err
}

func (p *TransactionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionData(%+v)", *p)
}

// Attributes:
//  - TxHashes
type PendingTransaction struct {
  TxHashes []string `thrift:"tx_hashes,1" db:"tx_hashes" json:"tx_hashes"`
}

func NewPendingTransaction() *PendingTransaction {
  return &PendingTransaction{}
}


func (p *PendingTransaction) GetTxHashes() []string {
  return p.TxHashes
}
func (p *PendingTransaction) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PendingTransaction)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TxHashes =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.TxHashes = append(p.TxHashes, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PendingTransaction) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PendingTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PendingTransaction) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tx_hashes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tx_hashes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.TxHashes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TxHashes {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tx_hashes: ", p), err) }
  return err
}

func (p *PendingTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PendingTransaction(%+v)", *p)
}

// Attributes:
//  - Hash
//  - Block
type BroadcastRawTransaction struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  Block *TransactionBlock `thrift:"block,2" db:"block" json:"block"`
}

func NewBroadcastRawTransaction() *BroadcastRawTransaction {
  return &BroadcastRawTransaction{}
}


func (p *BroadcastRawTransaction) GetHash() string {
  return p.Hash
}
var BroadcastRawTransaction_Block_DEFAULT *TransactionBlock
func (p *BroadcastRawTransaction) GetBlock() *TransactionBlock {
  if !p.IsSetBlock() {
    return BroadcastRawTransaction_Block_DEFAULT
  }
return p.Block
}
func (p *BroadcastRawTransaction) IsSetBlock() bool {
  return p.Block != nil
}

func (p *BroadcastRawTransaction) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BroadcastRawTransaction)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *BroadcastRawTransaction)  ReadField2(iprot thrift.TProtocol) error {
  p.Block = &TransactionBlock{}
  if err := p.Block.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Block), err)
  }
  return nil
}

func (p *BroadcastRawTransaction) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BroadcastRawTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BroadcastRawTransaction) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *BroadcastRawTransaction) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("block", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:block: ", p), err) }
  if err := p.Block.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Block), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:block: ", p), err) }
  return err
}

func (p *BroadcastRawTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BroadcastRawTransaction(%+v)", *p)
}

// Attributes:
//  - Result_
type CallSmartContract struct {
  Result_ string `thrift:"result,1" db:"result" json:"result"`
}

func NewCallSmartContract() *CallSmartContract {
  return &CallSmartContract{}
}


func (p *CallSmartContract) GetResult_() string {
  return p.Result_
}
func (p *CallSmartContract) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallSmartContract)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Result_ = v
}
  return nil
}

func (p *CallSmartContract) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CallSmartContract"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallSmartContract) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := oprot.WriteString(string(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *CallSmartContract) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallSmartContract(%+v)", *p)
}

// Attributes:
//  - ChainID
//  - Epoch
//  - Height
//  - Parent
//  - HCC
//  - TxHash
//  - ReceiptHash
//  - Bloom
//  - StateHash
//  - Timestamp
//  - Proposer
//  - Signature
type TransactionBlock struct {
  ChainID string `thrift:"ChainID,1" db:"ChainID" json:"ChainID"`
  Epoch int64 `thrift:"Epoch,2" db:"Epoch" json:"Epoch"`
  Height int64 `thrift:"Height,3" db:"Height" json:"Height"`
  Parent string `thrift:"Parent,4" db:"Parent" json:"Parent"`
  HCC *HCC `thrift:"HCC,5" db:"HCC" json:"HCC"`
  TxHash string `thrift:"TxHash,6" db:"TxHash" json:"TxHash"`
  ReceiptHash string `thrift:"ReceiptHash,7" db:"ReceiptHash" json:"ReceiptHash"`
  Bloom string `thrift:"Bloom,8" db:"Bloom" json:"Bloom"`
  StateHash string `thrift:"StateHash,9" db:"StateHash" json:"StateHash"`
  Timestamp int64 `thrift:"Timestamp,10" db:"Timestamp" json:"Timestamp"`
  Proposer string `thrift:"Proposer,11" db:"Proposer" json:"Proposer"`
  Signature string `thrift:"Signature,12" db:"Signature" json:"Signature"`
}

func NewTransactionBlock() *TransactionBlock {
  return &TransactionBlock{}
}


func (p *TransactionBlock) GetChainID() string {
  return p.ChainID
}

func (p *TransactionBlock) GetEpoch() int64 {
  return p.Epoch
}

func (p *TransactionBlock) GetHeight() int64 {
  return p.Height
}

func (p *TransactionBlock) GetParent() string {
  return p.Parent
}
var TransactionBlock_HCC_DEFAULT *HCC
func (p *TransactionBlock) GetHCC() *HCC {
  if !p.IsSetHCC() {
    return TransactionBlock_HCC_DEFAULT
  }
return p.HCC
}

func (p *TransactionBlock) GetTxHash() string {
  return p.TxHash
}

func (p *TransactionBlock) GetReceiptHash() string {
  return p.ReceiptHash
}

func (p *TransactionBlock) GetBloom() string {
  return p.Bloom
}

func (p *TransactionBlock) GetStateHash() string {
  return p.StateHash
}

func (p *TransactionBlock) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *TransactionBlock) GetProposer() string {
  return p.Proposer
}

func (p *TransactionBlock) GetSignature() string {
  return p.Signature
}
func (p *TransactionBlock) IsSetHCC() bool {
  return p.HCC != nil
}

func (p *TransactionBlock) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionBlock)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChainID = v
}
  return nil
}

func (p *TransactionBlock)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Epoch = v
}
  return nil
}

func (p *TransactionBlock)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *TransactionBlock)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Parent = v
}
  return nil
}

func (p *TransactionBlock)  ReadField5(iprot thrift.TProtocol) error {
  p.HCC = &HCC{}
  if err := p.HCC.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HCC), err)
  }
  return nil
}

func (p *TransactionBlock)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TxHash = v
}
  return nil
}

func (p *TransactionBlock)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ReceiptHash = v
}
  return nil
}

func (p *TransactionBlock)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Bloom = v
}
  return nil
}

func (p *TransactionBlock)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StateHash = v
}
  return nil
}

func (p *TransactionBlock)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *TransactionBlock)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Proposer = v
}
  return nil
}

func (p *TransactionBlock)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *TransactionBlock) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransactionBlock"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionBlock) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ChainID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ChainID: ", p), err) }
  if err := oprot.WriteString(string(p.ChainID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ChainID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ChainID: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Epoch", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Epoch: ", p), err) }
  if err := oprot.WriteI64(int64(p.Epoch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Epoch (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Epoch: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Height", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Height: ", p), err) }
  if err := oprot.WriteI64(int64(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Height (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Height: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Parent", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Parent: ", p), err) }
  if err := oprot.WriteString(string(p.Parent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Parent (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Parent: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("HCC", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:HCC: ", p), err) }
  if err := p.HCC.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HCC), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:HCC: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TxHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:TxHash: ", p), err) }
  if err := oprot.WriteString(string(p.TxHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.TxHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:TxHash: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ReceiptHash", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ReceiptHash: ", p), err) }
  if err := oprot.WriteString(string(p.ReceiptHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ReceiptHash (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ReceiptHash: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Bloom", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Bloom: ", p), err) }
  if err := oprot.WriteString(string(p.Bloom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Bloom (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Bloom: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("StateHash", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:StateHash: ", p), err) }
  if err := oprot.WriteString(string(p.StateHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.StateHash (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:StateHash: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Timestamp", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:Timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Timestamp (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:Timestamp: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Proposer", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:Proposer: ", p), err) }
  if err := oprot.WriteString(string(p.Proposer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Proposer (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:Proposer: ", p), err) }
  return err
}

func (p *TransactionBlock) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Signature", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:Signature: ", p), err) }
  if err := oprot.WriteString(string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Signature (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:Signature: ", p), err) }
  return err
}

func (p *TransactionBlock) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionBlock(%+v)", *p)
}

// Attributes:
//  - Votes
//  - BlockHash
type HCC struct {
  Votes []string `thrift:"Votes,1" db:"Votes" json:"Votes"`
  BlockHash string `thrift:"BlockHash,2" db:"BlockHash" json:"BlockHash"`
}

func NewHCC() *HCC {
  return &HCC{}
}


func (p *HCC) GetVotes() []string {
  return p.Votes
}

func (p *HCC) GetBlockHash() string {
  return p.BlockHash
}
func (p *HCC) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HCC)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Votes =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Votes = append(p.Votes, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HCC)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BlockHash = v
}
  return nil
}

func (p *HCC) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HCC"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HCC) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Votes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Votes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Votes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Votes {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Votes: ", p), err) }
  return err
}

func (p *HCC) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlockHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BlockHash: ", p), err) }
  if err := oprot.WriteString(string(p.BlockHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlockHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BlockHash: ", p), err) }
  return err
}

func (p *HCC) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HCC(%+v)", *p)
}

// Attributes:
//  - Hash
type BroadcastRawTransactionAsync struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
}

func NewBroadcastRawTransactionAsync() *BroadcastRawTransactionAsync {
  return &BroadcastRawTransactionAsync{}
}


func (p *BroadcastRawTransactionAsync) GetHash() string {
  return p.Hash
}
func (p *BroadcastRawTransactionAsync) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BroadcastRawTransactionAsync)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *BroadcastRawTransactionAsync) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BroadcastRawTransactionAsync"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BroadcastRawTransactionAsync) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *BroadcastRawTransactionAsync) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BroadcastRawTransactionAsync(%+v)", *p)
}

// Attributes:
//  - ChainID
//  - Epoch
//  - Height
//  - Parent
//  - TransactionsHash
//  - StateHash
//  - Timestamp
//  - Proposer
//  - Children
//  - Status
//  - Hash
//  - Transactions
type Block struct {
  ChainID string `thrift:"chain_id,1" db:"chain_id" json:"chain_id"`
  Epoch string `thrift:"epoch,2" db:"epoch" json:"epoch"`
  Height string `thrift:"height,3" db:"height" json:"height"`
  Parent string `thrift:"parent,4" db:"parent" json:"parent"`
  TransactionsHash string `thrift:"transactions_hash,5" db:"transactions_hash" json:"transactions_hash"`
  StateHash string `thrift:"state_hash,6" db:"state_hash" json:"state_hash"`
  Timestamp string `thrift:"timestamp,7" db:"timestamp" json:"timestamp"`
  Proposer string `thrift:"proposer,8" db:"proposer" json:"proposer"`
  Children []string `thrift:"children,9" db:"children" json:"children"`
  Status int32 `thrift:"status,10" db:"status" json:"status"`
  Hash string `thrift:"hash,11" db:"hash" json:"hash"`
  Transactions []*TransactionBlock `thrift:"transactions,12" db:"transactions" json:"transactions"`
}

func NewBlock() *Block {
  return &Block{}
}


func (p *Block) GetChainID() string {
  return p.ChainID
}

func (p *Block) GetEpoch() string {
  return p.Epoch
}

func (p *Block) GetHeight() string {
  return p.Height
}

func (p *Block) GetParent() string {
  return p.Parent
}

func (p *Block) GetTransactionsHash() string {
  return p.TransactionsHash
}

func (p *Block) GetStateHash() string {
  return p.StateHash
}

func (p *Block) GetTimestamp() string {
  return p.Timestamp
}

func (p *Block) GetProposer() string {
  return p.Proposer
}

func (p *Block) GetChildren() []string {
  return p.Children
}

func (p *Block) GetStatus() int32 {
  return p.Status
}

func (p *Block) GetHash() string {
  return p.Hash
}

func (p *Block) GetTransactions() []*TransactionBlock {
  return p.Transactions
}
func (p *Block) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Block)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChainID = v
}
  return nil
}

func (p *Block)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Epoch = v
}
  return nil
}

func (p *Block)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Height = v
}
  return nil
}

func (p *Block)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Parent = v
}
  return nil
}

func (p *Block)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TransactionsHash = v
}
  return nil
}

func (p *Block)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StateHash = v
}
  return nil
}

func (p *Block)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *Block)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Proposer = v
}
  return nil
}

func (p *Block)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Children =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Children = append(p.Children, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Block)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *Block)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *Block)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TransactionBlock, 0, size)
  p.Transactions =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TransactionBlock{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Transactions = append(p.Transactions, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Block) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Block"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Block) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chain_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chain_id: ", p), err) }
  if err := oprot.WriteString(string(p.ChainID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chain_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chain_id: ", p), err) }
  return err
}

func (p *Block) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("epoch", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:epoch: ", p), err) }
  if err := oprot.WriteString(string(p.Epoch)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.epoch (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:epoch: ", p), err) }
  return err
}

func (p *Block) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("height", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:height: ", p), err) }
  if err := oprot.WriteString(string(p.Height)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.height (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:height: ", p), err) }
  return err
}

func (p *Block) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parent", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:parent: ", p), err) }
  if err := oprot.WriteString(string(p.Parent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parent (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:parent: ", p), err) }
  return err
}

func (p *Block) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transactions_hash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transactions_hash: ", p), err) }
  if err := oprot.WriteString(string(p.TransactionsHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactions_hash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transactions_hash: ", p), err) }
  return err
}

func (p *Block) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("state_hash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:state_hash: ", p), err) }
  if err := oprot.WriteString(string(p.StateHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state_hash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:state_hash: ", p), err) }
  return err
}

func (p *Block) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timestamp: ", p), err) }
  return err
}

func (p *Block) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proposer", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:proposer: ", p), err) }
  if err := oprot.WriteString(string(p.Proposer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proposer (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:proposer: ", p), err) }
  return err
}

func (p *Block) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("children", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:children: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Children)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Children {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:children: ", p), err) }
  return err
}

func (p *Block) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err) }
  return err
}

func (p *Block) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:hash: ", p), err) }
  return err
}

func (p *Block) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transactions", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:transactions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Transactions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transactions {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:transactions: ", p), err) }
  return err
}

func (p *Block) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Block(%+v)", *p)
}

// Attributes:
//  - Thetawei
//  - Tfuelwei
type Coin struct {
  Thetawei string `thrift:"thetawei,1" db:"thetawei" json:"thetawei"`
  Tfuelwei string `thrift:"tfuelwei,2" db:"tfuelwei" json:"tfuelwei"`
}

func NewCoin() *Coin {
  return &Coin{}
}


func (p *Coin) GetThetawei() string {
  return p.Thetawei
}

func (p *Coin) GetTfuelwei() string {
  return p.Tfuelwei
}
func (p *Coin) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Coin)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Thetawei = v
}
  return nil
}

func (p *Coin)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tfuelwei = v
}
  return nil
}

func (p *Coin) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Coin"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Coin) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thetawei", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thetawei: ", p), err) }
  if err := oprot.WriteString(string(p.Thetawei)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thetawei (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thetawei: ", p), err) }
  return err
}

func (p *Coin) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tfuelwei", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tfuelwei: ", p), err) }
  if err := oprot.WriteString(string(p.Tfuelwei)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tfuelwei (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tfuelwei: ", p), err) }
  return err
}

func (p *Coin) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Coin(%+v)", *p)
}

// Attributes:
//  - Thetawei
//  - Tfuelwei
type Fee struct {
  Thetawei string `thrift:"thetawei,1" db:"thetawei" json:"thetawei"`
  Tfuelwei string `thrift:"tfuelwei,2" db:"tfuelwei" json:"tfuelwei"`
}

func NewFee() *Fee {
  return &Fee{}
}


func (p *Fee) GetThetawei() string {
  return p.Thetawei
}

func (p *Fee) GetTfuelwei() string {
  return p.Tfuelwei
}
func (p *Fee) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Fee)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Thetawei = v
}
  return nil
}

func (p *Fee)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tfuelwei = v
}
  return nil
}

func (p *Fee) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Fee"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Fee) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thetawei", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thetawei: ", p), err) }
  if err := oprot.WriteString(string(p.Thetawei)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thetawei (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thetawei: ", p), err) }
  return err
}

func (p *Fee) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tfuelwei", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tfuelwei: ", p), err) }
  if err := oprot.WriteString(string(p.Tfuelwei)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tfuelwei (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tfuelwei: ", p), err) }
  return err
}

func (p *Fee) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Fee(%+v)", *p)
}

// Attributes:
//  - Chain
//  - FromAddress
//  - GasPrice
//  - GasLimit
//  - Data
//  - Seq
//  - ToAddress
type SmartContract struct {
  Chain string `thrift:"chain,1" db:"chain" json:"chain"`
  FromAddress string `thrift:"from_address,2" db:"from_address" json:"from_address"`
  GasPrice string `thrift:"gas_price,3" db:"gas_price" json:"gas_price"`
  GasLimit string `thrift:"gas_limit,4" db:"gas_limit" json:"gas_limit"`
  Data string `thrift:"data,5" db:"data" json:"data"`
  Seq string `thrift:"seq,6" db:"seq" json:"seq"`
  ToAddress string `thrift:"to_address,7" db:"to_address" json:"to_address"`
}

func NewSmartContract() *SmartContract {
  return &SmartContract{}
}


func (p *SmartContract) GetChain() string {
  return p.Chain
}

func (p *SmartContract) GetFromAddress() string {
  return p.FromAddress
}

func (p *SmartContract) GetGasPrice() string {
  return p.GasPrice
}

func (p *SmartContract) GetGasLimit() string {
  return p.GasLimit
}

func (p *SmartContract) GetData() string {
  return p.Data
}

func (p *SmartContract) GetSeq() string {
  return p.Seq
}

func (p *SmartContract) GetToAddress() string {
  return p.ToAddress
}
func (p *SmartContract) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartContract)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Chain = v
}
  return nil
}

func (p *SmartContract)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromAddress = v
}
  return nil
}

func (p *SmartContract)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GasPrice = v
}
  return nil
}

func (p *SmartContract)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GasLimit = v
}
  return nil
}

func (p *SmartContract)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *SmartContract)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *SmartContract)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ToAddress = v
}
  return nil
}

func (p *SmartContract) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SmartContract"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartContract) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chain", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chain: ", p), err) }
  if err := oprot.WriteString(string(p.Chain)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chain (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chain: ", p), err) }
  return err
}

func (p *SmartContract) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("from_address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:from_address: ", p), err) }
  if err := oprot.WriteString(string(p.FromAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.from_address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:from_address: ", p), err) }
  return err
}

func (p *SmartContract) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gas_price", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gas_price: ", p), err) }
  if err := oprot.WriteString(string(p.GasPrice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gas_price (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gas_price: ", p), err) }
  return err
}

func (p *SmartContract) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gas_limit", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gas_limit: ", p), err) }
  if err := oprot.WriteString(string(p.GasLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gas_limit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gas_limit: ", p), err) }
  return err
}

func (p *SmartContract) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data: ", p), err) }
  if err := oprot.WriteString(string(p.Data)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data: ", p), err) }
  return err
}

func (p *SmartContract) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:seq: ", p), err) }
  if err := oprot.WriteString(string(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:seq: ", p), err) }
  return err
}

func (p *SmartContract) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("to_address", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:to_address: ", p), err) }
  if err := oprot.WriteString(string(p.ToAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to_address (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:to_address: ", p), err) }
  return err
}

func (p *SmartContract) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartContract(%+v)", *p)
}

// Attributes:
//  - Address
type NewKey_ struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
}

func NewNewKey_() *NewKey_ {
  return &NewKey_{}
}


func (p *NewKey_) GetAddress() string {
  return p.Address
}
func (p *NewKey_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NewKey_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *NewKey_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NewKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NewKey_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *NewKey_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NewKey_(%+v)", *p)
}

// Attributes:
//  - Addresses
type ListKeys struct {
  Addresses []string `thrift:"addresses,1" db:"addresses" json:"addresses"`
}

func NewListKeys() *ListKeys {
  return &ListKeys{}
}


func (p *ListKeys) GetAddresses() []string {
  return p.Addresses
}
func (p *ListKeys) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ListKeys)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Addresses =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.Addresses = append(p.Addresses, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ListKeys) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListKeys"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ListKeys) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addresses", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addresses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Addresses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Addresses {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addresses: ", p), err) }
  return err
}

func (p *ListKeys) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListKeys(%+v)", *p)
}

// Attributes:
//  - Unlocked
type StatusKey struct {
  Unlocked bool `thrift:"unlocked,1" db:"unlocked" json:"unlocked"`
}

func NewStatusKey() *StatusKey {
  return &StatusKey{}
}


func (p *StatusKey) GetUnlocked() bool {
  return p.Unlocked
}
func (p *StatusKey) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StatusKey)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Unlocked = v
}
  return nil
}

func (p *StatusKey) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StatusKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatusKey) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unlocked", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:unlocked: ", p), err) }
  if err := oprot.WriteBool(bool(p.Unlocked)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unlocked (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:unlocked: ", p), err) }
  return err
}

func (p *StatusKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatusKey(%+v)", *p)
}

// Attributes:
//  - ChainID
//  - FromAddress
//  - To
//  - Thetawei
//  - Tfuelwei
//  - Fee
//  - PrivateKey
type Send struct {
  ChainID string `thrift:"chain_id,1" db:"chain_id" json:"chain_id"`
  FromAddress string `thrift:"from_address,2" db:"from_address" json:"from_address"`
  To string `thrift:"to,3" db:"to" json:"to"`
  Thetawei string `thrift:"thetawei,4" db:"thetawei" json:"thetawei"`
  Tfuelwei string `thrift:"tfuelwei,5" db:"tfuelwei" json:"tfuelwei"`
  Fee string `thrift:"fee,6" db:"fee" json:"fee"`
  PrivateKey string `thrift:"private_key,7" db:"private_key" json:"private_key"`
}

func NewSend() *Send {
  return &Send{}
}


func (p *Send) GetChainID() string {
  return p.ChainID
}

func (p *Send) GetFromAddress() string {
  return p.FromAddress
}

func (p *Send) GetTo() string {
  return p.To
}

func (p *Send) GetThetawei() string {
  return p.Thetawei
}

func (p *Send) GetTfuelwei() string {
  return p.Tfuelwei
}

func (p *Send) GetFee() string {
  return p.Fee
}

func (p *Send) GetPrivateKey() string {
  return p.PrivateKey
}
func (p *Send) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Send)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChainID = v
}
  return nil
}

func (p *Send)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromAddress = v
}
  return nil
}

func (p *Send)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *Send)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Thetawei = v
}
  return nil
}

func (p *Send)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tfuelwei = v
}
  return nil
}

func (p *Send)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *Send)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PrivateKey = v
}
  return nil
}

func (p *Send) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Send"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Send) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chain_id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chain_id: ", p), err) }
  if err := oprot.WriteString(string(p.ChainID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chain_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chain_id: ", p), err) }
  return err
}

func (p *Send) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("from_address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:from_address: ", p), err) }
  if err := oprot.WriteString(string(p.FromAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.from_address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:from_address: ", p), err) }
  return err
}

func (p *Send) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("to", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:to: ", p), err) }
  if err := oprot.WriteString(string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:to: ", p), err) }
  return err
}

func (p *Send) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thetawei", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:thetawei: ", p), err) }
  if err := oprot.WriteString(string(p.Thetawei)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thetawei (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:thetawei: ", p), err) }
  return err
}

func (p *Send) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tfuelwei", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tfuelwei: ", p), err) }
  if err := oprot.WriteString(string(p.Tfuelwei)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tfuelwei (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tfuelwei: ", p), err) }
  return err
}

func (p *Send) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fee: ", p), err) }
  return err
}

func (p *Send) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("private_key", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:private_key: ", p), err) }
  if err := oprot.WriteString(string(p.PrivateKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.private_key (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:private_key: ", p), err) }
  return err
}

func (p *Send) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Send(%+v)", *p)
}

// Attributes:
//  - Jsonrpc
//  - ID
//  - Result_
//  - Error
type AccountResult_ struct {
  Jsonrpc string `thrift:"jsonrpc,1" db:"jsonrpc" json:"jsonrpc"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
  Result_ *Account `thrift:"result,3" db:"result" json:"result"`
  Error *Error `thrift:"error,4" db:"error" json:"error"`
}

func NewAccountResult_() *AccountResult_ {
  return &AccountResult_{}
}


func (p *AccountResult_) GetJsonrpc() string {
  return p.Jsonrpc
}

func (p *AccountResult_) GetID() int32 {
  return p.ID
}
var AccountResult__Result__DEFAULT *Account
func (p *AccountResult_) GetResult_() *Account {
  if !p.IsSetResult_() {
    return AccountResult__Result__DEFAULT
  }
return p.Result_
}
var AccountResult__Error_DEFAULT *Error
func (p *AccountResult_) GetError() *Error {
  if !p.IsSetError() {
    return AccountResult__Error_DEFAULT
  }
return p.Error
}
func (p *AccountResult_) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AccountResult_) IsSetError() bool {
  return p.Error != nil
}

func (p *AccountResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AccountResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Jsonrpc = v
}
  return nil
}

func (p *AccountResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *AccountResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.Result_ = &Account{}
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AccountResult_)  ReadField4(iprot thrift.TProtocol) error {
  p.Error = &Error{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *AccountResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AccountResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AccountResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jsonrpc", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jsonrpc: ", p), err) }
  if err := oprot.WriteString(string(p.Jsonrpc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jsonrpc (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jsonrpc: ", p), err) }
  return err
}

func (p *AccountResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *AccountResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *AccountResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:error: ", p), err) }
  if err := p.Error.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:error: ", p), err) }
  return err
}

func (p *AccountResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AccountResult_(%+v)", *p)
}

// Attributes:
//  - Jsonrpc
//  - ID
//  - Result_
//  - Error
type BroadcastRawTransactionAsyncResult_ struct {
  Jsonrpc string `thrift:"jsonrpc,1" db:"jsonrpc" json:"jsonrpc"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
  Result_ *BroadcastRawTransactionAsync `thrift:"result,3" db:"result" json:"result"`
  Error *Error `thrift:"error,4" db:"error" json:"error"`
}

func NewBroadcastRawTransactionAsyncResult_() *BroadcastRawTransactionAsyncResult_ {
  return &BroadcastRawTransactionAsyncResult_{}
}


func (p *BroadcastRawTransactionAsyncResult_) GetJsonrpc() string {
  return p.Jsonrpc
}

func (p *BroadcastRawTransactionAsyncResult_) GetID() int32 {
  return p.ID
}
var BroadcastRawTransactionAsyncResult__Result__DEFAULT *BroadcastRawTransactionAsync
func (p *BroadcastRawTransactionAsyncResult_) GetResult_() *BroadcastRawTransactionAsync {
  if !p.IsSetResult_() {
    return BroadcastRawTransactionAsyncResult__Result__DEFAULT
  }
return p.Result_
}
var BroadcastRawTransactionAsyncResult__Error_DEFAULT *Error
func (p *BroadcastRawTransactionAsyncResult_) GetError() *Error {
  if !p.IsSetError() {
    return BroadcastRawTransactionAsyncResult__Error_DEFAULT
  }
return p.Error
}
func (p *BroadcastRawTransactionAsyncResult_) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *BroadcastRawTransactionAsyncResult_) IsSetError() bool {
  return p.Error != nil
}

func (p *BroadcastRawTransactionAsyncResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BroadcastRawTransactionAsyncResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Jsonrpc = v
}
  return nil
}

func (p *BroadcastRawTransactionAsyncResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *BroadcastRawTransactionAsyncResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.Result_ = &BroadcastRawTransactionAsync{}
  if err := p.Result_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *BroadcastRawTransactionAsyncResult_)  ReadField4(iprot thrift.TProtocol) error {
  p.Error = &Error{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BroadcastRawTransactionAsyncResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BroadcastRawTransactionAsyncResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BroadcastRawTransactionAsyncResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("jsonrpc", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jsonrpc: ", p), err) }
  if err := oprot.WriteString(string(p.Jsonrpc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jsonrpc (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jsonrpc: ", p), err) }
  return err
}

func (p *BroadcastRawTransactionAsyncResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *BroadcastRawTransactionAsyncResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("result", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:result: ", p), err) }
  if err := p.Result_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:result: ", p), err) }
  return err
}

func (p *BroadcastRawTransactionAsyncResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:error: ", p), err) }
  if err := p.Error.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:error: ", p), err) }
  return err
}

func (p *BroadcastRawTransactionAsyncResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BroadcastRawTransactionAsyncResult_(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type Error struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewError() *Error {
  return &Error{}
}


func (p *Error) GetCode() int32 {
  return p.Code
}

func (p *Error) GetMessage() string {
  return p.Message
}
func (p *Error) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Error)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Error)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Error) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Error"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Error) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *Error) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *Error) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Error(%+v)", *p)
}

type ThetaService interface {
  // Parameters:
  //  - Account
  GetAccount(ctx context.Context, account string) (r *Account, err error)
  // Parameters:
  //  - Send
  SendTx(ctx context.Context, send *Send) (r *BroadcastRawTransactionAsync, err error)
}

type ThetaServiceClient struct {
  c thrift.TClient
}

func NewThetaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ThetaServiceClient {
  return &ThetaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewThetaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ThetaServiceClient {
  return &ThetaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewThetaServiceClient(c thrift.TClient) *ThetaServiceClient {
  return &ThetaServiceClient{
    c: c,
  }
}

func (p *ThetaServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Account
func (p *ThetaServiceClient) GetAccount(ctx context.Context, account string) (r *Account, err error) {
  var _args8 ThetaServiceGetAccountArgs
  _args8.Account = account
  var _result9 ThetaServiceGetAccountResult
  if err = p.Client_().Call(ctx, "getAccount", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Send
func (p *ThetaServiceClient) SendTx(ctx context.Context, send *Send) (r *BroadcastRawTransactionAsync, err error) {
  var _args10 ThetaServiceSendTxArgs
  _args10.Send = send
  var _result11 ThetaServiceSendTxResult
  if err = p.Client_().Call(ctx, "sendTx", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

type ThetaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ThetaService
}

func (p *ThetaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ThetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ThetaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewThetaServiceProcessor(handler ThetaService) *ThetaServiceProcessor {

  self12 := &ThetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self12.processorMap["getAccount"] = &thetaServiceProcessorGetAccount{handler:handler}
  self12.processorMap["sendTx"] = &thetaServiceProcessorSendTx{handler:handler}
return self12
}

func (p *ThetaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x13.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x13

}

type thetaServiceProcessorGetAccount struct {
  handler ThetaService
}

func (p *thetaServiceProcessorGetAccount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThetaServiceGetAccountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThetaServiceGetAccountResult{}
var retval *Account
  var err2 error
  if retval, err2 = p.handler.GetAccount(ctx, args.Account); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAccount: " + err2.Error())
    oprot.WriteMessageBegin("getAccount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAccount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type thetaServiceProcessorSendTx struct {
  handler ThetaService
}

func (p *thetaServiceProcessorSendTx) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ThetaServiceSendTxArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendTx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ThetaServiceSendTxResult{}
var retval *BroadcastRawTransactionAsync
  var err2 error
  if retval, err2 = p.handler.SendTx(ctx, args.Send); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendTx: " + err2.Error())
    oprot.WriteMessageBegin("sendTx", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sendTx", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Account
type ThetaServiceGetAccountArgs struct {
  Account string `thrift:"account,1" db:"account" json:"account"`
}

func NewThetaServiceGetAccountArgs() *ThetaServiceGetAccountArgs {
  return &ThetaServiceGetAccountArgs{}
}


func (p *ThetaServiceGetAccountArgs) GetAccount() string {
  return p.Account
}
func (p *ThetaServiceGetAccountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThetaServiceGetAccountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *ThetaServiceGetAccountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAccount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThetaServiceGetAccountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *ThetaServiceGetAccountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThetaServiceGetAccountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThetaServiceGetAccountResult struct {
  Success *Account `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThetaServiceGetAccountResult() *ThetaServiceGetAccountResult {
  return &ThetaServiceGetAccountResult{}
}

var ThetaServiceGetAccountResult_Success_DEFAULT *Account
func (p *ThetaServiceGetAccountResult) GetSuccess() *Account {
  if !p.IsSetSuccess() {
    return ThetaServiceGetAccountResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThetaServiceGetAccountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThetaServiceGetAccountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThetaServiceGetAccountResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Account{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThetaServiceGetAccountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAccount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThetaServiceGetAccountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThetaServiceGetAccountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThetaServiceGetAccountResult(%+v)", *p)
}

// Attributes:
//  - Send
type ThetaServiceSendTxArgs struct {
  Send *Send `thrift:"send,1" db:"send" json:"send"`
}

func NewThetaServiceSendTxArgs() *ThetaServiceSendTxArgs {
  return &ThetaServiceSendTxArgs{}
}

var ThetaServiceSendTxArgs_Send_DEFAULT *Send
func (p *ThetaServiceSendTxArgs) GetSend() *Send {
  if !p.IsSetSend() {
    return ThetaServiceSendTxArgs_Send_DEFAULT
  }
return p.Send
}
func (p *ThetaServiceSendTxArgs) IsSetSend() bool {
  return p.Send != nil
}

func (p *ThetaServiceSendTxArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThetaServiceSendTxArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Send = &Send{}
  if err := p.Send.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Send), err)
  }
  return nil
}

func (p *ThetaServiceSendTxArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendTx_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThetaServiceSendTxArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("send", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:send: ", p), err) }
  if err := p.Send.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Send), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:send: ", p), err) }
  return err
}

func (p *ThetaServiceSendTxArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThetaServiceSendTxArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ThetaServiceSendTxResult struct {
  Success *BroadcastRawTransactionAsync `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewThetaServiceSendTxResult() *ThetaServiceSendTxResult {
  return &ThetaServiceSendTxResult{}
}

var ThetaServiceSendTxResult_Success_DEFAULT *BroadcastRawTransactionAsync
func (p *ThetaServiceSendTxResult) GetSuccess() *BroadcastRawTransactionAsync {
  if !p.IsSetSuccess() {
    return ThetaServiceSendTxResult_Success_DEFAULT
  }
return p.Success
}
func (p *ThetaServiceSendTxResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ThetaServiceSendTxResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThetaServiceSendTxResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &BroadcastRawTransactionAsync{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ThetaServiceSendTxResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendTx_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThetaServiceSendTxResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ThetaServiceSendTxResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThetaServiceSendTxResult(%+v)", *p)
}


